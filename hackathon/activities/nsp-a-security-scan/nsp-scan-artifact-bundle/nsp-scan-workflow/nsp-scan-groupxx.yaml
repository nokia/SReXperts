# Copyright 2024 Nokia
# Licensed under the BSD 3-Clause License.
# SPDX-License-Identifier: BSD-3-Clause

version: '1.0'

nsp-scan-groupxx:
  type: direct

  tags:
    - LSO
    - device operations demo

  input:
    - neId

  vars:
    lsoInfo: "Failed"
    lsoStageError: "unknown"
    unknownports:
      57400/tcp: gNMI
      demo: demo

  output:
    lsoInfo: <% $.lsoInfo %>

  output-on-error:
    lsoInfo: <% $.lsoInfo %>
    lsoStageError: <% $.lsoStageError %>
    
  tasks:
    lsoStageMapping:
      action: std.noop
      publish:
        foldername: "/deviceOperations/multiStepDemo/<% $.neId %>"
        filename: report_<% get_local_time("%Y-%m-%d_%H%M%S") %>.csv

        lsoWorkflowStageMapping:
          nsp-scan-groupxx:
          - getNodeDetails
          - pingTargetDevice
          - scanTargetDevice
      on-success:
        - getNodeDetails

    getNodeDetails:
      action: nsp.https
      input:
        url: https://restconf-gateway/restconf/operations/nsp-inventory:find 
        method: POST
        body: 
          input:
            xpath-filter: /nsp-equipment:network/network-element[ne-id='<% $.neId %>']
            fields: ne-id;ne-name;ip-address;version;location;type;product;communication-state
        resultFilter: $.content.get('nsp-inventory:output').data
      publish:
        lsoInfo: <% task().result %> 
        nodeInfo: <% switch(task().result.content.len()>0 => task().result.content.first(), true => {}) %>
      publish-on-error:
        lsoInfo: "ERROR: Failed to get node info"
        lsoStageError: <% task().result %> 
      on-success:
        - pingTargetDevice: <% task().result.content %>
        - nodeNotFound: <% not task().result.content %>

    nodeNotFound:
      action: std.fail
      publish-on-error:
        lsoInfo: "ERROR: Failed to get node details"
        lsoStageError: "Node with ne-id='<% $.neId %>' not found in inventory"
      
    pingTargetDevice:
      action: nsp.ping
      input:
        host: <% $.nodeInfo.get('ip-address') %>
        duration: 10
      publish:
        nerechability : <% str(task().result.success) %>
        maxtime : <% str(task().result.RTT.max) %>
        mintime : <% str(task().result.RTT.min) %>
        avgtime : <% str(task().result.RTT.avg) %>
      on-success:
        - scanTargetDevice
      on-error:
        - pingFailed
  
    pingFailed:
      input: 
        error_data: "Ping workflow execution failed"
      publish-on-error:
        lsoInfo: <% task().result %>
        
    scanTargetDevice:
      action: nsp.shell
      input:
        command: nmap -p21-23,53,179,646,830,3455,3784,57400 -oF - <% $.nodeInfo.get('ip-address') %>
      publish:
        scanresult: <% task().result.response %>
      on-success:
        - scanresultprocess
      on-error:
        - scanFailed
    
    scanresultprocess:
      action: nsp.python
      input:
        context:
          scan: <% $.scanresult %>
          ukports: <% $.unknownports %>
        script: |
          result = []
          for line in context["scan"]:
            if "open" in line:
              if "unknown" in line:
                if line.split(" ")[0] in context["ukports"].keys(): result.append("- "+context["ukports"][line.split(" ")[0]])
                else: result.append("- "+line.split(" ")[0])
              else: result.append("- "+line.split(" ")[-1])
          return "<b>Open ports:</b><br/>"+"<br/>".join(result)
      publish:
        lsoInfo: <% task().result %>

    scanFailed:
      input: 
        error_data: "Scan workflow execution failed"
      publish-on-error:
        lsoInfo: <% task().result %>